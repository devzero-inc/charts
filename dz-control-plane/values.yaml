# -- Overrides the chart's name.
nameOverride: null

# -- Overrides the chart's computed fullname.
fullnameOverride: null

image:
  # -- Devzero container image repository'
  repository: images.devzero.io/proxy/devzero-control-plane/056855531191.dkr.ecr.us-west-2.amazonaws.com
  # -- Devzero container image tag'
  tag: "latest"
  # -- Container pull policy
  pullPolicy: Always 
  # -- Optionally specify an array of imagePullSecrets
  pullSecrets:
    - replicated-pull-secret

global:
  podAnnotations: {}

serviceAccount:
  # -- Specifies whether a service account should be created
  create: false
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use
  name: "devzero"

auth:
  # -- Base64 encoded public key for JWT verification
  publicKey: ""
  # -- Base64 encoded private key for JWT verification
  privateKey: ""

gateway:
  # -- Number of replicas for Api Gateway
  replicas: 3

  imageName: "api-gateway"

  # -- Optionally set the scheduler for pods
  schedulerName: ""

  # -- Optionally set the name of the PriorityClass for pods
  priorityClassName: null

  # -- NodeSelector to pin pods to certain set of nodes
  nodeSelector: { }

  # -- Pod affinity settings
  affinity: { }

  # -- Pod tolerations
  tolerations: []

  # -- Pod labels
  podLabels: {}

  # -- Pod annotations
  podAnnotations: {}

  # -- Annotations
  annotations: {}

  # Api Gateway autoscaling configuration
  autoscaling:
    # -- Enable autoscaling for Api Gateway
    enabled: false
    # -- Minimum autoscaling replicas for Api Gateway
    minReplicas: 1
    # -- Maximum autoscaling replicas for Api Gateway
    maxReplicas: 3
    # -- Target CPU utilisation percentage for Api Gateway
    targetCPUUtilizationPercentage: 60
    # -- Target memory utilisation percentage for Api Gateway
    targetMemoryUtilizationPercentage: 80

  resources:
    # -- Resource limits for Api Gateway
    limits:
      cpu: 1000m
      memory: 1Gi
    # -- Resource requests for Api Gateway
    requests:
      cpu: 100m
      memory: 128Mi

  # Api Gateway service configuration
  service:
    # -- Port of the Api Gateway service
    port: 8443
    # -- Port of the Api Gateway Metrics service
    metricsPort: 9090
    # -- Type of the Api Gateway service
    type: ClusterIP
    # -- Annotations for the Api Gateway service
    annotations: {}
    # -- Labels for the Api Gateway service
    labels: {}

  # Api Gateway ingress configuration
  ingress:
    # -- Specify if the Api Gateway Ingress is enabled
    enabled: false
    # -- Ingress Class Name. May be required for k8s >= 1.18
    ingressClassName: "nginx"
    # -- Annotations for the Api Gateway ingress
    annotations: {}
    # -- hosts configuration for the Api Gateway ingress
    hosts:
      - host: api.devzero.example.com
        paths:
          - path: /
            # -- pathType (e.g. ImplementationSpecific, Prefix, ... etc.) might also be required for some Ingress Controllers
            # pathType: Prefix
    # -- TLS configuration for the Api Gateway ingress
    tls:
      - secretName: devzero-api-tls
        hosts:
          - api.devzero.example.com


backend:
  # -- Number of replicas for Backend 
  replicas: 1

  imageName: "backend"

  # -- Optionally set the scheduler for pods
  schedulerName: ""

  # -- Optionally set the name of the PriorityClass for pods
  priorityClassName: null

  # -- NodeSelector to pin pods to certain set of nodes
  nodeSelector: { }

  # -- Pod affinity settings
  affinity: { }

  # -- Pod tolerations
  tolerations: []

  # -- Pod labels
  podLabels: {}

  # -- Pod annotations
  podAnnotations: {}

  # -- Annotations
  annotations: {}

  redis:
    url: redis://dz-control-plane-redis-backend-master:6379
    password: ""

  mongo:
    url: "mongodb://devzero:backend@dz-control-plane-mongodb-headless:27017/backend?directConnection=true"

  hydra:
    url: https://hydra.selfzero.net
    apiKey: 

  control:
    url: https://api.selfzero.net

  logsrv:
    queue: http://dz-control-plane-elasticmq:9324/queue/logsrv.fifo
    region: "elasticmq"

  github:
    appId: 
    appPrivateKey: ""

  stripe:
    apiKey: ""
    webhookSecret: ""
    autoCreateSubscriptions: false

  mimir:
    url: http://mimir:8080/prometheus

  hibernation:
    enabled: false

  cli:
    urlTemplate: https://selfzero.net/dashboard/settings/user-settings?cli-session-id=%s

  sendgrid:
    apiKey: test-key

  grafana:
    enabled: false
    url: grafana.selfzero.net
    datasourceId: 
    doraDatasourceId:
    odaDatasourceId:
    password:

  storage:
    allowedTeam: team-example-id
    ceph:
      clusterId: ""
      filesystemName: cephfs
      filesystemPath: cephfs
      monitorAddress: /volumes/cache
      userCredentials: ""
      username: vuser

  mainTeamId: ""

  licenseKey: "selfzero:4888557666:mkqocQS1bKHpZx0cbz+NCtvFSEMWvgIht5iFZo2HQA0OWhI9fjpZI1wrc2zRRjEhLjnV1BACgKAqHi2qizu1b1AWeJMsKkmD3jwNOG8kaETZeJpx55AvuUSoaWi8tX+h1FpjM69Ls55dNIq0GlKk2Ze/cbQBLefVKPHOupPkIXf9DO7IQg12o9V0bIqZkOJP1X3Lpem4S6suwEkXbhq4sMpzrZXIK/rYcy37X7ux1AQ39/OizpK1YR9NoVgHf4Szv//V/P2+i7INXY90mPVlT7wr1rrEya7l/gYiKc1l94FQnU45FKPIUHxL3z3c0XRapTVbxk7TF5XlygzlkRkUv27A0Aggt6VYWeW+8b43iNlbSJBfR0/KvwF7RRaQx1A0qbrk0sqqNxA+IET35rK/gfhYFYAa861ac7NqTgOBhfwcgLmXRNRgInA6JQMGqyACQF0X7b5gUcetbtItYK7+hAL0v/fJagkYwaDQiJeMgxyDNK9OOQCm9kzST4TPNHhsr21/jqPsKvlYup+zFa+521jJuN8k80BLxOjbA6n0PbbvMLFyUTU7LzLOZe8wvCqMfNqBZgn3BMsVX/brpPZzmk2N6Acasm+9m/36IT1C/pRv59aWYWJcYnd7itll0BBO6mV9QBu43L0B00UUiNM32eqaU2N5pLTHlhevxT57aU8="

  arch: amd64

  registry:
    url: http://artifactory

  cortex:
    key: ""

  # Backend autoscaling configuration
  autoscaling:
    # -- Enable autoscaling for Backend
    enabled: false
    # -- Minimum autoscaling replicas for Backend
    minReplicas: 1
    # -- Maximum autoscaling replicas for Backend
    maxReplicas: 3
    # -- Target CPU utilisation percentage for Backend
    targetCPUUtilizationPercentage: 60
    # -- Target memory utilisation percentage for Backend
    targetMemoryUtilizationPercentage: 80

  resources:
    # -- Resource limits for Backend
    limits:
      cpu: 1000m
      memory: 1Gi
    # -- Resource requests for Backend
    requests:
      cpu: 100m
      memory: 128Mi

  # Api Gateway service configuration
  service:
    # -- Port of the Backend service
    port: 8443
    # -- Port of the Backend Metrics service
    metricsPort: 9090
    # -- Type of the Backend service
    type: ClusterIP
    # -- Annotations for the Backend service
    annotations: {}
    # -- Labels for the Backend service
    labels: {}


hydra:
  # -- Number of replicas for Hydra
  replicas: 1

  imageName: "hydra"

  # -- Optionally set the scheduler for pods
  schedulerName: ""

  # -- Optionally set the name of the PriorityClass for pods
  priorityClassName: null

  # -- NodeSelector to pin pods to certain set of nodes
  nodeSelector: { }

  # -- Pod affinity settings
  affinity: { }

  # -- Pod tolerations
  tolerations: []

  # -- Pod labels
  podLabels: {}

  # -- Pod annotations
  podAnnotations: {}

  # -- Annotations
  annotations: {}

  serverUrl: https://hydra.selfzero.net

  postgres:
    host: "dz-postgres-hydra"
    port: 5432
    name: "hydra"
    user: "hydra"
    password: "hydra"

  redis:
    url: redis://default:@dz-control-plane-redis-hydra-master:6379/0

  cidr:
    v6: fd7a:115c:a1e0::/48
    v4: 100.64.0.0/10

  derp:
    server:
      enabled: false
      regionId: 999
      regionCode: "headscale"
      regionName: "Headscale Embedded DERP"
      stunListenAddr: "0.0.0.0:3478"
    urls:
      - "https://controlplane.tailscale.com/derpmap/default"
    paths: []
    autoUpdateEnabled: true
    updateFrequency: "24h"

  # Hydra autoscaling configuration
  autoscaling:
    # -- Enable autoscaling for Hydra
    enabled: false
    # -- Minimum autoscaling replicas for Hydra
    minReplicas: 1
    # -- Maximum autoscaling replicas for Hydra
    maxReplicas: 3
    # -- Target CPU utilisation percentage for Hydra
    targetCPUUtilizationPercentage: 60
    # -- Target memory utilisation percentage for Hydra
    targetMemoryUtilizationPercentage: 80

  resources:
    # -- Resource limits for Hydra
    limits:
      cpu: 1000m
      memory: 1Gi
    # -- Resource requests for Hydra
    requests:
      cpu: 100m
      memory: 128Mi

  # Hydra service configuration
  service:
    # -- Port of the Hydra service
    port: 8443
    # -- Port of the Hydra Metrics service
    metricsPort: 9090
    # -- Type of the Hydra service
    type: ClusterIP
    # -- Annotations for the Hydra service
    annotations: {}
    # -- Labels for the Hydra service
    labels: {}

  # Hydra ingress configuration
  ingress:
    # -- Specify if the Hydra Ingress is enabled
    enabled: false
    # -- Ingress Class Name. May be required for k8s >= 1.18
    ingressClassName: "nginx"
    # -- Annotations for the Hydra ingress
    annotations: {}
    # -- hosts configuration for the Hydra ingress
    hosts:
      - host: hydra.selfzero.net
        paths:
          - path: /
            # -- pathType (e.g. ImplementationSpecific, Prefix, ... etc.) might also be required for some Ingress Controllers
            # pathType: Prefix
    # -- TLS configuration for the Hydra ingress
    tls:
      - secretName: devzero-hydra-tls
        hosts:
          - hydra.selfzero.net

logsrv:
  # -- Number of replicas for Logsrv
  replicas: 1

  imageName: "logsrv"

  # -- Optionally set the scheduler for pods
  schedulerName: ""

  # -- Optionally set the name of the PriorityClass for pods
  priorityClassName: null

  # -- NodeSelector to pin pods to certain set of nodes
  nodeSelector: { }

  # -- Pod affinity settings
  affinity: { }

  # -- Pod tolerations
  tolerations: []

  # -- Pod labels
  podLabels: {}

  # -- Pod annotations
  podAnnotations: {}

  # -- Annotations
  annotations: {}

  queue:
    url: http://dz-control-plane-elasticmq:9324/queue/logsrv.fifo

  postgres:
    url: postgresql://logsrv:logsrv@dz-control-plane-postgres-logsrv:5432/logsrv
    password: logsrv

  allowedCorsOrigins:
    - "http://localhost:3000"
  
  auth0:
    domains:
      - "auth.devzero.example"
    audience:
      - "https://devzero.example/api"
  
  refreshJwksTimer: 3600

  # Logsrv autoscaling configuration
  autoscaling:
    # -- Enable autoscaling for Logsrv
    enabled: false
    # -- Minimum autoscaling replicas for Logsrv
    minReplicas: 1
    # -- Maximum autoscaling replicas for Logsrv
    maxReplicas: 3
    # -- Target CPU utilisation percentage for Logsrv
    targetCPUUtilizationPercentage: 60
    # -- Target memory utilisation percentage for Logsrv
    targetMemoryUtilizationPercentage: 80

  resources:
    # -- Resource limits for Logsrv
    limits:
      cpu: 1000m
      memory: 1Gi
    # -- Resource requests for Logsrv
    requests:
      cpu: 100m
      memory: 128Mi

  # Logsrv service configuration
  service:
    # -- Port of the Logsrv service
    port: 8443
    # -- Port of the Logsrv Metrics service
    metricsPort: 9090
    # -- Type of the Logsrv service
    type: ClusterIP
    # -- Annotations for the Logsrv service
    annotations: {}
    # -- Labels for the Logsrv service
    labels: {}

  # Logsrv ingress configuration
  ingress:
    # -- Specify if the Logsrv Ingress is enabled
    enabled: false
    # -- Ingress Class Name. May be required for k8s >= 1.18
    ingressClassName: "nginx"
    # -- Annotations for the Hydra ingress
    annotations: {}
    # -- hosts configuration for the Hydra ingress
    hosts:
      - host: logsrv.selfzero.net
        paths:
          - path: /
            # -- pathType (e.g. ImplementationSpecific, Prefix, ... etc.) might also be required for some Ingress Controllers
            # pathType: Prefix
    # -- TLS configuration for the Logsrv ingress
    tls:
      - secretName: devzero-logsrv-tls
        hosts:
          - logsrv.selfzero.net

polland:
  worker:
    # -- Number of replicas for Polland Worker
    replicas: 3

    # 1 hour of termination grace to allow stacks to finishing tasks
    terminationGracePeriodSeconds: 3600

    # Available queues created from worker
    queues:
      - name: fast
        replicaCount: 3
        autoscaling:
          enabled: false 
          minReplicas: 3
          maxReplicas: 5
      - name: build
        replicaCount: 3
        autoscaling:
          enabled: false 
          minReplicas: 3
          maxReplicas: 5
      - name: workload
        replicaCount: 3
        autoscaling:
          enabled: false 
          minReplicas: 3
          maxReplicas: 5
      - name: cluster
        replicaCount: 3
        autoscaling:
          enabled: false 
          minReplicas: 3
          maxReplicas: 5
      - name: hibernation
        replicaCount: 1
        autoscaling:
          enabled: false
          minReplicas: 1
          maxReplicas: 1

  beat:
    # -- Number of replicas for Polland Beat
    replicas: 1

  flower:
    # -- Number of replicas for Polland Flower
    replicas: 1

  celeryExporter:
    # -- Number of replicas for Polland Celery Exporter
    replicas: 1
    
  # -- Number of replicas for Polland 
  replicas: 1

  imageName: "polland"

  # -- Optionally set the scheduler for pods
  schedulerName: ""

  # -- Optionally set the name of the PriorityClass for pods
  priorityClassName: null

  # -- NodeSelector to pin pods to certain set of nodes
  nodeSelector: { }

  # -- Pod affinity settings
  affinity: { }

  # -- Pod tolerations
  tolerations: []

  # -- Pod labels
  podLabels: {}

  # -- Pod annotations
  podAnnotations: {}

  # -- Annotations
  annotations: {}

  # -- Env configuration for polland configmap
  env: 
    MYSQL_PORT: "3306"
    MYSQL_DATABASE: "polland"
    MYSQL_USER: "polland"
    MYSQL_PASSWORD: "polland"
    MYSQL_HOST: "dz-control-plane-mysql-polland-headless"
    MYSQL_ROOT_PASSWORD: "polland"
    REDIS_URL: "redis://dz-control-plane-redis-polland-master:6379/0"

    USE_DOCKER: "yes"
    # Disable connection pooling in preprod because we are running a small container and we don't want to keep connections open.
    CONN_MAX_AGE: "0"
    DJANGO_ALLOWED_HOSTS: "*"
    DJANGO_SETTINGS_MODULE: "config.settings.production"
    # This is supposed to be a secret, but since it is only used to encrypt sessions and we don't use sessions, it can be defined plaintext.
    DJANGO_SECRET_KEY: "super_secret_key"
    CELERY_FLOWER_USER: "devzero"
    CELERY_FLOWER_PASSWORD: "devzero"

    BASE_POLLAND_URL: "http://0.0.0.0:8000"

  # Polland autoscaling configuration
  autoscaling:
    # -- Enable autoscaling for Polland 
    enabled: false
    # -- Minimum autoscaling replicas for Polland 
    minReplicas: 1
    # -- Maximum autoscaling replicas for Polland 
    maxReplicas: 3
    # -- Target CPU utilisation percentage for Polland 
    targetCPUUtilizationPercentage: 60
    # -- Target memory utilisation percentage for Polland 
    targetMemoryUtilizationPercentage: 80

  resources:
    # -- Resource limits for Polland 
    limits:
      cpu: 1000m
      memory: 1Gi
    # -- Resource requests for Polland 
    requests:
      cpu: 100m
      memory: 128Mi

  # Polland service configuration
  service:
    # -- Port of the Polland service
    port: 8000
    # -- Port of the Polland Metrics service
    metricsPort: 9090
    # -- Type of the Polland service
    type: ClusterIP
    # -- Annotations for the Polland service
    annotations: {}
    # -- Labels for the Polland service
    labels: {}

  # Polland ingress configuration
  ingress:
    # -- Specify if the Polland Ingress is enabled
    enabled: false
    # -- Ingress Class Name. May be required for k8s >= 1.18
    ingressClassName: "nginx"
    # -- Annotations for the Polland ingress
    annotations: {}
    # -- hosts configuration for the Polland ingress
    hosts:
      - host: polland.selfzero.net
        paths:
          - path: /
            # -- pathType (e.g. ImplementationSpecific, Prefix, ... etc.) might also be required for some Ingress Controllers
            # pathType: Prefix
    # -- TLS configuration for the Polland ingress
    tls:
      - secretName: devzero-polland-tls
        hosts:
          - polland.selfzero.net

pulse:
  # -- Number of replicas for Pulse 
  replicas: 1

  imageName: "pulse"

  # -- Optionally set the scheduler for pods
  schedulerName: ""

  # -- Optionally set the name of the PriorityClass for pods
  priorityClassName: null

  # -- NodeSelector to pin pods to certain set of nodes
  nodeSelector: { }

  # -- Pod affinity settings
  affinity: { }

  # -- Pod tolerations
  tolerations: []

  # -- Pod labels
  podLabels: {}

  # -- Pod annotations
  podAnnotations: {}

  # -- Annotations
  annotations: {}

  postgres:
    password: pulse
    user: postgres
    host: dz-control-plane
    port: 5432
    database: postgres
    ssl: allow 

  mysql:
    user: pulse
    password: pulse
    host: dz-control-plane-mysql-pulse-headless
    port: 3306
    database: pulse

  devlake:
    secret: "VAZOCUQLBAZAXRBLVNPFYCLEERMAKQWUISBXSNWDQTHAJSXDEQRNFZVIVMBDZGIASTGSXNEXAOQJKXKNOSECEPILRMBPEAPRBEODNASRWQVYXUDVRNJFLLTXBPNNDZBG"

  openApi:
    token: ""

  # Pulse autoscaling configuration
  autoscaling:
    # -- Enable autoscaling for Pulse 
    enabled: false
    # -- Minimum autoscaling replicas for Pulse 
    minReplicas: 1
    # -- Maximum autoscaling replicas for Pulse 
    maxReplicas: 3
    # -- Target CPU utilisation percentage for Pulse 
    targetCPUUtilizationPercentage: 60
    # -- Target memory utilisation percentage for Pulse 
    targetMemoryUtilizationPercentage: 80

  resources:
    # -- Resource limits for Pulse 
    limits:
      cpu: 1000m
      memory: 1Gi
    # -- Resource requests for Pulse 
    requests:
      cpu: 100m
      memory: 128Mi

  # Pulse service configuration
  service:
    # -- Port of the Pulse service
    port: 8443
    # -- Port of the Pulse Metrics service
    metricsPort: 9090
    # -- Type of the Pulse service
    type: ClusterIP
    # -- Annotations for the Pulse service
    annotations: {}
    # -- Labels for the Pulse service
    labels: {}

  # Pulse ingress configuration
  ingress:
    # -- Specify if the Pulse Ingress is enabled
    enabled: false
    # -- Ingress Class Name. May be required for k8s >= 1.18
    ingressClassName: "nginx"
    # -- Annotations for the Pulse ingress
    annotations: {}
    # -- hosts configuration for the Pulse ingress
    hosts:
      - host: pulse.selfzero.net
        paths:
          - path: /
            # -- pathType (e.g. ImplementationSpecific, Prefix, ... etc.) might also be required for some Ingress Controllers
            # pathType: Prefix
    # -- TLS configuration for the Pulse ingress
    tls:
      - secretName: devzero-pulse-tls
        hosts:
          - pulse.selfzero.net

buildqd:
  # -- Number of replicas for Buildqd 
  replicas: 1

  imageName: "buildqd"

  # -- Optionally set the scheduler for pods
  schedulerName: ""

  # -- Optionally set the name of the PriorityClass for pods
  priorityClassName: null

  # -- NodeSelector to pin pods to certain set of nodes
  nodeSelector: { }

  # -- Pod affinity settings
  affinity: { }

  # -- Pod tolerations
  tolerations: []

  logsrv:
    queue: http://dz-control-plane-elasticmq:9324/queue/logsrv.fifo
    region: elasticmq

  redis:
    url: redis://dz-control-plane-redis-buildqd-master:6379

  # Buildqd autoscaling configuration
  autoscaling:
    # -- Enable autoscaling for Buildqd 
    enabled: false
    # -- Minimum autoscaling replicas for Buildqd 
    minReplicas: 1
    # -- Maximum autoscaling replicas for Buildqd 
    maxReplicas: 3
    # -- Target CPU utilisation percentage for Buildqd 
    targetCPUUtilizationPercentage: 60
    # -- Target memory utilisation percentage for Buildqd 
    targetMemoryUtilizationPercentage: 80

  resources:
    # -- Resource limits for Buildqd 
    limits:
      cpu: 1000m
      memory: 1Gi
    # -- Resource requests for Buildqd 
    requests:
      cpu: 100m
      memory: 128Mi

  # Buildqd service configuration
  service:
    # -- Port of the Buildqd service
    port: 8443
    # -- Port of the Buildqd Metrics service
    metricsPort: 9090
    # -- Type of the Buildqd service
    type: ClusterIP
    # -- Annotations for the Buildqd service
    annotations: {}
    # -- Labels for the Buildqd service
    labels: {}

  buildkit:
    image:
      # Buildkit repository
      repository: docker.io/moby/buildkit
      # Buildkit image policy
      pullPolicy: IfNotPresent
      # Buildkit image tag
      tag: "v0.15.1"

    # Buildkit container security context
    securityContext:
      privileged: true

    # Buildkit command
    command: buildkitd

    # Buildkit args
    args:
      - --addr
      - unix:///run/buildkit/buildkitd.sock
      - --addr
      - tcp://0.0.0.0:1234
  
    resources:
      # -- Resource limits for Buildqd 
      limits:
        cpu: 1000m
        memory: 1Gi
      # -- Resource requests for Buildqd 
      requests:
        cpu: 100m
        memory: 128Mi

    # Buildkit persistant volume size for shared cache
    persistentVolumeClaim:
      storageSize: 100Gi

web:
  # -- Number of replicas for Web 
  replicas: 1

  imageName: "web"

  # -- Optionally set the scheduler for pods
  schedulerName: ""

  # -- Optionally set the name of the PriorityClass for pods
  priorityClassName: null

  # -- NodeSelector to pin pods to certain set of nodes
  nodeSelector: { }

  # -- Pod affinity settings
  affinity: { }

  # -- Pod tolerations
  tolerations: []

  # -- Pod labels
  podLabels: {}

  # -- Pod annotations
  podAnnotations: {}

  # -- Annotations
  annotations: {}

  # Web autoscaling configuration
  autoscaling:
    # -- Enable autoscaling for Web 
    enabled: false
    # -- Minimum autoscaling replicas for Web 
    minReplicas: 1
    # -- Maximum autoscaling replicas for Web 
    maxReplicas: 3
    # -- Target CPU utilisation percentage for Web 
    targetCPUUtilizationPercentage: 60
    # -- Target memory utilisation percentage for Web 
    targetMemoryUtilizationPercentage: 80

  resources:
    # -- Resource limits for Web 
    limits:
      cpu: 1000m
      memory: 1Gi
    # -- Resource requests for Web 
    requests:
      cpu: 100m
      memory: 128Mi

  # Web service configuration
  service:
    # -- Port of the Web service
    port: 8443
    # -- Port of the Web Metrics service
    metricsPort: 9090
    # -- Type of the Web service
    type: ClusterIP
    # -- Annotations for the Web service
    annotations: {}
    # -- Labels for the Web service
    labels: {}

  # Web ingress configuration
  ingress:
    # -- Specify if the Web Ingress is enabled
    enabled: false
    # -- Ingress Class Name. May be required for k8s >= 1.18
    ingressClassName: "nginx"
    # -- Annotations for the Web ingress
    annotations: {}
    # -- hosts configuration for the Web ingress
    hosts:
      - host: selfzero.net
        paths:
          - path: /
            # -- pathType (e.g. ImplementationSpecific, Prefix, ... etc.) might also be required for some Ingress Controllers
            # pathType: Prefix
    # -- TLS configuration for the Web ingress
    tls:
      - secretName: devzero-web-tls
        hosts:
          - selfzero.net

#### External dependencies ####

# Cluster issuer for cert manager
issuer:
  enabled: true

  # ACME server URL
  acme: https://acme-v02.api.letsencrypt.org/directory 
  # Email address used for ACME registration
  email: example@selfzero.net

# Vault external dependencies
vault:
  global:
    enabled: true
  
  injector:
    enabled: false
    metrics:
      enabled: true
  ui:
    enabled: true
  
  server:
    enabled: true
    extraArgs: "-config=/vault/userconfig/vault-extra-config/config.hcl"
    ingress:
      enabled: true
      labels: { }
      annotations:
        cert-manager.io/cluster-issuer: "letsencrypt-production"
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  
      # Optionally use ingressClassName instead of deprecated annotation.
      # See: https://kubernetes.io/docs/concepts/services-networking/ingress/#deprecated-annotation
      ingressClassName: "nginx"
  
      # As of Kubernetes 1.19, all Ingress Paths must have a pathType configured. The default value below should be sufficient in most cases.
      # See: https://kubernetes.io/docs/concepts/services-networking/ingress/#path-types for other possible values.
      pathType: Prefix
  
      # When HA mode is enabled and K8s service registration is being used,
      # configure the ingress to point to the Vault active service.
      activeService: true
      hosts:
        - host: vault.selfzero.net
          paths: [ ]
      ## Extra paths to prepend to the host configuration. This is useful when working with annotation based services.
      extraPaths: [ ]
      tls:
        - hosts:
            - vault.selfzero.net
          secretName: devzero-vault-tls
    auditStorage:
      enabled: true
    dataStorage:
      enabled: true
    ha:
      enabled: true
      replicas: 3
      config: |
        disable_mlock = true
        ui = true
  
        listener "tcp" {
          tls_disable = 1
          address = "[::]:8200"
          cluster_address = "[::]:8201"
        }
  
        service_registration "kubernetes" {}
  
        #seal "awskms" {
        #  kms_key_id = "${kms_key_id}"
        #  region = "${region}"
        #}
    volumes:
      - name: vault-extra-config
        secret:
          defaultMode: 420
          secretName: vault-extra-config
    volumeMounts:
      - mountPath: /vault/userconfig/vault-extra-config
        name: vault-extra-config
        readOnly: true

# Minio external dependencies
#minio:

# Postgres external dependencies
postgres-logsrv:
  metrics:
    enabled: true
  
  primary:
    persistence:
      size: "50Gi"
  
  auth:
    database: "logsrv"
    username: "logsrv"
    password: "logsrv"
  
  architecture: "standalone"

postgres-hydra:
  metrics:
    enabled: true
  
  primary:
    persistence:
      size: "50Gi"
  
  auth:
    database: "hydra"
    username: "hydra"
    password: "hydra"

  architecture: "standalone"

# Mysql external dependencies
mysql-polland:
  auth:
    username: "polland"
    database: "polland"
    password: "polland"
    rootPassword: "polland"

mysql-pulse:
  auth:
    username: "pulse"
    database: "pulse"
    password: "pulse"
    rootPassword: "pulse"

mysql-vault:
  auth:
    username: "vault"
    database: "vault"
    password: "vault"
    rootPassword: "vault"

# MongoDB external dependencies
mongodb:
  metrics:
    enabled: true
    containerPort: 9090
  
  persistence:
    size: "50Gi"
  
  architecture: "replicaset"
  
  auth:
    usernames:
      - "devzero"
    databases:
      - "backend"
    passwords:
      - "backend"

# Redis external dependencies
redis-backend:
  architecture: "standalone"
  
  master:
    persistence:
      enabled: true
    serviceAccount:
      create: false
  
  serviceAccount:
    create: false
  
  auth:
    enabled: false
  
  replica:
    replicaCount: 0

redis-buildqd:
  architecture: "standalone"
  
  master:
    persistence:
      enabled: true
    serviceAccount:
      create: false
  
  serviceAccount:
    create: false
  
  auth:
    enabled: false
  
  replica:
    replicaCount: 0
  
redis-hydra:
  architecture: "standalone"
  
  master:
    persistence:
      enabled: true
    serviceAccount:
      create: false
  
  serviceAccount:
    create: false
  
  auth:
    enabled: false
  
  replica:
    replicaCount: 0

redis-polland:
  architecture: "standalone"
  
  master:
    persistence:
      enabled: true
    serviceAccount:
      create: false
  
  serviceAccount:
    create: false
  
  auth:
    enabled: false
  
  replica:
    replicaCount: 0

# TimescaleDB external dependencies
timescaledb-single:
  replicaCount: 1
  secrets:
    credentials:
      PATRONI_SUPERUSER_PASSWORD: "pulse"
      PATRONI_REPLICATION_PASSWORD: "pulse"
      PATRONI_admin_PASSWORD: "pulse"

artifactory:
  databaseUpgradeReady: true

# Elasticmq external dependencies
elasticmq:
  service:
    type: ClusterIP
    port: 9324
  
  elasticmq:
    port: 9324
    config: |
      include classpath("application.conf")
  
      node-address {
          protocol = http
          host = {{ template "elasticmq.fullname" . }}
          port = {{ .Values.elasticmq.port }}
          context-path = ""
      }
  
  
      rest-sqs {
          enabled = true
          bind-port = {{ .Values.elasticmq.port }}
          bind-hostname = "0.0.0.0"
          // Possible values: relaxed, strict
          sqs-limits = relaxed
      }

      queues {
        "logsrv.fifo" {
          fifo = true
          contentBasedDeduplication = true
        }
      }
